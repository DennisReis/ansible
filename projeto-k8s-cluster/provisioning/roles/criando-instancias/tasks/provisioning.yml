- name: Criando o Sec
  local_action: 
    module: ec2_group
    name: "{{ sec_group_name }}"
    description: sg projeto ansible
    profile: "{{ profile }}"
    region: "{{ region }}"
    rules:
    - proto: tcp
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
      rule_desc: SSH
    - proto: tcp
      from_port: 2733
      to_port: 2733
      cidr_ip: 0.0.0.0/0
      rule_desc: Docker port2733
    - proto: tcp
      from_port: 7946
      to_port: 7946
      cidr_ip: 0.0.0.0/0
      rule_desc: Docker port7946 tcp
    - proto: udp
      from_port: 7946
      to_port: 7946
      cidr_ip: 0.0.0.0/0
      rule_desc: Docker port7946 udp
    - proto: udp
      from_port: 4789
      to_port: 4789
      cidr_ip: 0.0.0.0/0
      rule_desc: Docker port4789 udp
    - proto: tcp
      from_port: 6443
      to_port: 6443
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-apiserver
    - proto: tcp
      from_port: 2379
      to_port: 2379
      cidr_ip: 0.0.0.0/0
      rule_desc: etcd-server API
    - proto: tcp
      from_port: 2780
      to_port: 2780
      cidr_ip: 0.0.0.0/0
      rule_desc: etcd-server API
    - proto: tcp
      from_port: 10250
      to_port: 10250
      cidr_ip: 0.0.0.0/0
      rule_desc: kubelet API
    - proto: tcp
      from_port: 10251
      to_port: 10251
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-scheduler
    - proto: tcp
      from_port: 10252
      to_port: 10252
      cidr_ip: 0.0.0.0/0
      rule_desc: kube-controler-manager
    - proto: tcp
      from_port: 10255
      to_port: 10255
      cidr_ip: 0.0.0.0/0
      rule_desc: kubelet API Read-Only
    - proto: tcp
      from_port: 30000
      to_port: 32767
      cidr_ip: 0.0.0.0/0
      rule_desc: NodePort Service
    - proto: tcp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: WeaveNet
    - proto: udp
      from_port: 6783
      to_port: 6783
      cidr_ip: 0.0.0.0/0
      rule_desc: Weavenet
    - proto: udp
      from_port: 6784
      to_port: 6784
      cidr_ip: 0.0.0.0/0
      rule_desc: WeaveNet
    - proto: tcp
      from_port: 32222
      to_port: 32222
      cidr_ip: 0.0.0.0/0
      rule_desc: GiropopsApp
    - proto: tcp
      from_port: 32111
      to_port: 32111
      cidr_ip: 0.0.0.0/0
      rule_desc: GiropopsAppPrometheus
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0
  register: basic_firewall

- name: Criando instancia EC2
  local_action: ec2
    group={{ sec_group_name }}
    instance_type={{ instance_type }}
    image={{ image }}
    profile={{ profile }}
    wait=true
    region={{ region }}
    keypair={{ keypair }}
    count={{ count }}
  register: ec2

- name: Adicionando a instancia ao inventario temp
  add_host: name={{ item.public_ip }} groups=giropops-new
  with_items: "{{ ec2.instances }}"

- name: Adicionando o ip publico da instancia criada ao arquvio hosts 
  local_action: lineinfile
    dest="./hosts"
    regexp={{ item.public_ip }}
    insertafter="[kubernetes]" line={{ item.public_ip }}
  with_items: "{{ ec2.instances }}"

- name: Adicionando o ip privado da insntacia criada ao arquvio hosts 
  local_action: lineinfile
    dest="./hosts"
    regexp={{ item.private_ip }}
    insertafter="[kubernetes]" line={{ item.private_ip }}
  with_items: "{{ ec2.instances }}"

- name: Esperando o SSH 
  local_action: wait_for
    host={{ item.public_ip }} 
    port=22
    state=started
  with_items: "{{ ec2.instances }}"

- name: Adicionando uma tag na instancia 
  local_action: ec2_tag resource={{ item.id }} region={{ region }} profile={{ profile }} state=present
  with_items: "{{ ec2.instances }}"
  args: 
    tags: 
      Name: ansible-{{ item. ami_launch_index |int + 1 }}
